// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

Table Users {
  user_id int [pk, increment]
  username varchar
  password varchar
  email varchar
  role varchar [note: 'admin or user']
}

Table Books {
  book_id int [pk, increment]
  title varchar
  category_id int [pk]
  author_id int [pk]
  isbn varchar
  price decimal
  stock int
  description text
}

Table Categories {
  category_id int [pk, increment]
  category_name varchar
}

Table Authors {
  author_id int [pk, increment]
  name varchar
}

Table Orders {
  order_id int [pk, increment]
  user_id int
  order_date datetime
  status varchar [note: 'pending, shipped, delivered, canceled']
  total_amount decimal
}

Table Order_Items {
  order_item_id int [pk, increment]
  order_id int
  book_id int
  quantity int
  price decimal
}

Table Shopping_Cart {
  cart_id int [pk, increment]
  user_id int
  created_at datetime
}

Table Cart_Items {
  cart_item_id int [pk, increment]
  cart_id int
  book_id int
  quantity int
}

Table Reviews {
  review_id int [pk, increment]
  user_id int
  book_id int
  rating int [note: 'rating between 1 and 5']
  comment text
  review_date datetime
}

Ref: Orders.user_id > Users.user_id // many-to-one
Ref: Order_Items.order_id > Orders.order_id // many-to-one
Ref: Order_Items.book_id > Books.book_id // many-to-one
Ref: Shopping_Cart.user_id > Users.user_id // many-to-one
Ref: Cart_Items.cart_id > Shopping_Cart.cart_id // many-to-one
Ref: Cart_Items.book_id > Books.book_id // many-to-one
Ref: Reviews.user_id > Users.user_id // many-to-one
Ref: Reviews.book_id > Books.book_id // many-to-one
Ref: Books.category_id > Categories.category_id // many-to-one
Ref: Books.author_id > Authors.author_id // many-to-one